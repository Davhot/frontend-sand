var path = require('path');

module.exports = {
  entry: "./app/app.jsx", // входная точка - исходный файл
  output: {
    path: path.resolve(__dirname, './public'), // путь к каталогу выходных файлов - папка public
    publicPath: '/public/',
    filename: "bundle.js" // название создаваемого файла
  },
  module: {
    rules: [ //загрузчик для jsx
      {
        test: /\.jsx?$/, // определяем тип файлов
        exclude: /(node_modules)/, // исключаем из обработки папку node_modules
        loader: "babel-loader", // определяем загрузчик
        options: {
          presets: ["@babel/preset-env", "@babel/preset-react"] // используемые плагины
        }
      }
    ]
  }
}

// packege.json:
//
// Среди зависимостей в секции "dependencies" здесь определены две библиотеки -
// react и react-dom. Эти модули содержат функционал библиотеки React.js,
// который будет необходим для работы приложения.
// В секции "devDependencies" определены те модули, которые потребуются
// только при разработке приложения.
// Так как для компиляции из jsx в js необходим компилятор babel, то вначале
// определяются соотетстующие модули. Модуль "@babel/core" - это основной модуль
// компилятора. Для загрузки файлов в webpack необходимы загрузчики, которые
// собственно и определяют правила загрузки и обработки файлов. Для загрузки
// файлов добавляется модуль "babel-loader". И этот модуль будет использовать
// два других модуля - "@babel/preset-env" и "@babel/preset-react". Модуль
// "@babel/preset-env" нужен для поддержки возможностей стандарта ES2015+.
// А "@babel/preset-react" необходим для работы в связке с React.js и файлами jsx.
// Так как для сборки мы будем использовать Webpack, то в конце добавляется
// модуль "webpack". Чтобы упростить разработку, добавлен еще один модуль -
// "webpack-dev-server", который позволяет динамически запускать проект.
// Кроме того, в секции scripts определены две команды: dev и build. Команда
// dev предназначена для нужд разработки и позволяет на лету сгенерировать
// файл сборки и запустить проект. Этой команде передаются два параметра --hot
// --open. Параметр --hot позволяет задействовать плагин Hot Module Replacement,
// который позволяет производить повторный рендеринг при изменениях в компоненте.
// Второй параметр --open запускает браузер для обращения к приложению.
// Команда build позволяет сгенерировать файл сборки, и затем этот файл может
// использоваться в production.

// Команды:
// npm run dev - запуск
// npm run build - сборка
